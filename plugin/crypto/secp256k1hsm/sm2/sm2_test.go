package sm2

import (
	"fmt"
	"math/big"
	"testing"

	"github.com/tjfoc/gmsm/sm3"

	"github.com/33cn/plugin/plugin/dapp/evm/executor/vm/common"

	"github.com/33cn/chain33/system/crypto/sm2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	gmsm_sm2 "github.com/tjfoc/gmsm/sm2"
)

//data = 112233445566112233445566112233445566112233445566
//SDF_HashFinal success! sm3Len = 32, sm3Hash = 6DB75BE80A3EE89F1F049F6F046BFF5B39CF686E502F29906DECCCF8C72E4907
//
//SDF_InternalSign_ECC success
//sign.r: 0000000000000000000000000000000000000000000000000000000000000000F5BBF85D6165F6C027EA80A2930E270DAEF152FB5F090365E2AD55BE31BF2EF4
//sign.s: 00000000000000000000000000000000000000000000000000000000000000001C68E90BFEDE1196F3CB2447EA0A6D81818627C6AA447F4CFC57BD817A42222A
//
//SDF_InternalVerify_ECC success
//SDF_ExportSignPublicKey_ECC success for chain33 verification
//chain33 PubKey.bits: 256
//chain33 PubKey.x: 0000000000000000000000000000000000000000000000000000000000000000FD4241057FEC6CBEEC501F7E1763751B8F6DFCFB910FB634FBB76A16639EF172
//chain33 PubKey.y: 00000000000000000000000000000000000000000000000000000000000000001C6DA89F9C1A5EE9B6108E5A2A5FE336962630A34DBA1AF428451E1CE63BB3CF

func Test_Crypto(t *testing.T) {
	require := require.New(t)

	c := &sm2.Driver{}

	priv, err := c.GenKey()
	require.Nil(err)
	t.Logf("priv:%X, len:%d", priv.Bytes(), len(priv.Bytes()))

	pub := priv.PubKey()
	require.NotNil(pub)
	t.Logf("pub:%X, len:%d", pub.Bytes(), len(pub.Bytes()))

	msg := []byte("hello world")
	signature := priv.Sign(msg)
	t.Logf("sign:%X, len:%d", signature.Bytes(), len(signature.Bytes()))

	ok := pub.VerifyBytes(msg, signature)
	require.Equal(true, ok)
}

//SDF_HashFinal success! sm3Len = 32, sm3Hash = 9D6A3506E37DB26538706965689AACE220D32391812A82F6C28A06AE8E2F2434
//
//SDF_InternalSign_ECC success
//sign.r: 00000000000000000000000000000000000000000000000000000000000000003AA29337E7149047FB8AE83F30AA00125E23173C88F284ADDED2E5B59ACAA5B9
//sign.s: 0000000000000000000000000000000000000000000000000000000000000000E2E9338109D74269578216039FD4D1C764E7F6F142CBB2E3035E7E49D375D330
//
//SDF_InternalVerify_ECC success
//SDF_ExportSignPublicKey_ECC success for chain33 verification
//chain33 PubKey.bits: 256
//chain33 PubKey.x: 0000000000000000000000000000000000000000000000000000000000000000FD4241057FEC6CBEEC501F7E1763751B8F6DFCFB910FB634FBB76A16639EF172
//chain33 PubKey.y: 00000000000000000000000000000000000000000000000000000000000000001C6DA89F9C1A5EE9B6108E5A2A5FE336962630A34DBA1AF428451E1CE63BB3CF

func Test_VerifySigFromTass(t *testing.T) {
	require := require.New(t)

	//c := &sm2.Driver{}

	xBytes := common.FromHex("0000000000000000000000000000000000000000000000000000000000000000FD4241057FEC6CBEEC501F7E1763751B8F6DFCFB910FB634FBB76A16639EF172")
	yBytes := common.FromHex("00000000000000000000000000000000000000000000000000000000000000001C6DA89F9C1A5EE9B6108E5A2A5FE336962630A34DBA1AF428451E1CE63BB3CF")
	x := new(big.Int).SetBytes(xBytes)
	y := new(big.Int).SetBytes(yBytes)

	publicKey := &gmsm_sm2.PublicKey{
		X: x,
		Y: y,
	}
	var pubSM2 sm2.PubKeySM2
	copy(pubSM2[:], gmsm_sm2.Compress(publicKey))

	rBytes := common.FromHex("00000000000000000000000000000000000000000000000000000000000000003AA29337E7149047FB8AE83F30AA00125E23173C88F284ADDED2E5B59ACAA5B9")
	sBytes := common.FromHex("0000000000000000000000000000000000000000000000000000000000000000E2E9338109D74269578216039FD4D1C764E7F6F142CBB2E3035E7E49D375D330")
	r := new(big.Int).SetBytes(rBytes)
	s := new(big.Int).SetBytes(sBytes)

	signature := sm2.SignatureSM2(sm2.Serialize(r, s))

	msg := []byte("112233445566112233445566112233445566112233445566")
	ok := pubSM2.VerifyBytes(msg, signature)
	require.Equal(true, ok)
}

func Test_msgHash(t *testing.T) {

	uid := []byte{0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38}

	xBytes := common.FromHex("0000000000000000000000000000000000000000000000000000000000000000FD4241057FEC6CBEEC501F7E1763751B8F6DFCFB910FB634FBB76A16639EF172")
	yBytes := common.FromHex("00000000000000000000000000000000000000000000000000000000000000001C6DA89F9C1A5EE9B6108E5A2A5FE336962630A34DBA1AF428451E1CE63BB3CF")
	x := new(big.Int).SetBytes(xBytes)
	y := new(big.Int).SetBytes(yBytes)

	publicKey := &gmsm_sm2.PublicKey{
		X: x,
		Y: y,
	}
	var pubSM2 sm2.PubKeySM2
	copy(pubSM2[:], gmsm_sm2.Compress(publicKey))

	pub := gmsm_sm2.Decompress(pubSM2[0:sm2.SM2PublicKeyCompressed])

	za, err := gmsm_sm2.ZA(pub, uid)
	assert.Equal(t, nil, err)

	//msg := []byte("112233445566112233445566112233445566112233445566")
	msg := common.FromHex("112233445566112233445566112233445566112233445566")
	fmt.Println("msg = ", common.Bytes2Hex(msg))
	e := sm3.New()
	e.Write(za)
	e.Write(msg)
	hashInt := new(big.Int).SetBytes(e.Sum(nil)[:32])
	fmt.Print("hash = ", common.Bytes2Hex(hashInt.Bytes()))
	//hash = 0x9d6a3506e37db26538706965689aace220d32391812a82f6c28a06ae8e2f2434
	//726106A793A45AF8EE1B9B6781B87391E4B49304A5F12F6DFF82C7EDB5F58390
	//0x726106a793a45af8ee1b9b6781b87391e4b49304a5f12f6dff82c7edb5f58390
}
